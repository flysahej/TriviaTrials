"""A class to manage game-related database operations.

Authors: Arjun Atwal, comments by Sonia
"""
from pymongo import MongoClient

# Create a client
client = MongoClient('mongodb://localhost:27017/')

# Access the 'mydatabase' database
db = client['mydatabase']

# Access the 'games' collection
games = db['games']

# JSON data for a game, will be generated by ryan
game = {
  "game_id": 2,
  "level_number": 3,
  "player_index": 5,
  "players": [
    {
      "name": "Player4",
      "password": "password123",
      "streak": 2,
      "duck_count": 0,
      "score": 250
    }
  ]
}

def insert_game(game):
  """Inserts a game document into the collection.

        Args:
            game (dict): A dictionary representing the game document to be inserted.

        Returns:
            pymongo.results.UpdateResult: The result of the update operation.
  """
  result = games.update_one({"game_id": game["game_id"]}, {"$set": game}, upsert=True)
  return result

# # Print the id of the inserted document
# print("Inserted game with id %s" % result.upserted_id)

def find_game_by_id(game_id):
  # Find the game with the specified game_id
  """Finds a game document by its game_id.

        Args:
            game_id (int): The game_id to search for.

        Returns:
            dict: The game document found, or None if not found.
  """
  game = games.find_one({"game_id": game_id})
  return game

def get_player_scores():
  # Initialize the player_scores dictionary
  """Retrieves player scores from all game documents.

        Returns:
            dict: A dictionary containing player names as keys and their scores as values.
  """
  player_scores = {}

  # for each game_id, print the player names and scores
  for game in games.find():
    # print("Game %s" % game["game_id"])
    for player in game["players"]:
      # Store the player names and scores in the dictionary
      player_scores[player["name"]] = player["score"]
    # print(player_scores)
  return player_scores

def get_player_info():
  # Initialize the player_info dictionary
  """Retrieves detailed information about each player.

        Returns:
            dict: A dictionary containing player names as keys and dictionaries of their information as values.
  """
  player_info = {}

  # for each game_id, print the player names and scores
  for game in games.find():
    # print("Game %s" % game["game_id"])
    for player in game["players"]:
      # Store the player names and scores in the dictionary
      player_info[player["name"]] = {
        "streak": player["streak"],
        "duck_count": player["duck_count"],
        "score": player["score"]
      }
    # print(player_info)
  return player_info

def update_player_score(player_name, score):
  # Update the score of the specified player
  """Updates the score of a player in all game documents.

        Args:
            player_name (str): The name of the player whose score is to be updated.
            score (int): The new score of the player.

        Returns:
            pymongo.results.UpdateResult: The result of the update operation.
  """
  result = games.update_many({"players.name": player_name}, {"$set": {"players.$.score": score}})
  return result

def player_info_by_saved_game(game_id):
  # Retrieve detailed information about each player in a saved game
  """Retrieves detailed information about each player in a saved game.

        Args:
            game_id (int): The game_id of the saved game.

        Returns:
            dict: A dictionary containing player names as keys and dictionaries of their information as values.
  """
  player_info = {}

  # Find the game with the specified game_id
  game = games.find_one({"game_id": game_id})

  # for each game_id, print the player names and scores
  for player in game["players"]:
    # Store the player names and scores in the dictionary
    player_info[player["name"]] = {
      player["password"],
    }
  return player_info




